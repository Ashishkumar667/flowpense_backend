// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

enum Role {
  EMPLOYEE
  SUPERADMIN
  TEAMLEAD
  ADMIN
}


model User {
  id           Int          @id @default(autoincrement())
  firstName    String        
  lastName     String   
  email        String       @unique
  password     String
  isVerified   Boolean      @default(false)        
  mobile       String       @unique
  createdAt    DateTime     @default(now())
  role         Role         @default(EMPLOYEE)
  mfaSecret    String?
  mfaEnabled   Boolean      @default(false)
  otp          Otp?
  companyId    Int?
  company      Company?     @relation(fields: [companyId], references: [id])
  refreshTokens RefreshToken[]
  expenses      CardExpense[]
  teams         TeamEmployee[]
  userKyc       UserKyc[]
  cardFundingRequest  CardFundingRequest[]    
}

model Otp {
  id        Int      @id @default(autoincrement())
  code      String
  expiresAt DateTime
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Company {
  id            Int           @id @default(autoincrement())
  name          String
  rcNumber      String         // CAC registration number
  tin           String         // Tax Identification Number
  country       String
  kycStatus     String         @default("pending")
  walletBalance Float          @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  users        User[]
  companyKyc   CompanyKyc?
  walletLedger WalletLedger[]
  cards         Card[]
  teams        Team[]
}

model CompanyKyc {
  id           Int      @id @default(autoincrement())
  companyId    Int      @unique
  docs         Json     // Store uploaded docs as JSON (e.g. file URLs)
  adminBvnHash String
  status       String   @default("pending")
  reviewerId   Int?     // SuperAdmin reviewing KYC
  createdAt    DateTime @default(now())

  company     Company   @relation(fields: [companyId], references: [id])
}

model WalletLedger {
  id           Int      @id @default(autoincrement())
  companyId    Int
  txType       String   // credit, hold, settle, refund, reversal
  amount       Float
  currency     String   @default("NGN")
  balanceAfter Float
  status       String  @default("pending")
  receipt_url  String?
  createdAt    DateTime @default(now())

  company     Company   @relation(fields: [companyId], references: [id])
}

model Card {
  id          Int       @id @default(autoincrement())
  CardType    String    @default("virtual card")
  CardNumber  String
  CardName    String
  CardHolder  String[]
  Approver    String[]
  TeamName    String
  DailySpendLimit Int 
  WeeklySpendLimit  Int
  MonthlyLimit      Int
  PerTransactionLimit  Int
  CardFunding          Int
  status        String    @default("Active")
  BlockedCategory   String[]
  companyId         Int
  company           Company    @relation(fields: [companyId], references: [id])
   expenses             CardExpense[]
   cardFundingRequest   CardFundingRequest[]
}

model CardExpense {
    id          Int        @id @default(autoincrement())
    merchant    String
    category    String
    Amount      Int
    currency    String
    status      String     @default("Pending")
    createdAt   DateTime    @default(now())
    cardId      Int
    card        Card        @relation(fields: [cardId], references: [id])
    userId      Int
    user        User        @relation(fields: [userId], references: [id])
}

model Team {
  id           Int         @id @default(autoincrement())
  TeamName     String      
  Description  String
  MonthlyBudget Int
  companyId     Int
  TotalMembers  Int        @default(0)
  Members       TeamEmployee[]
  company       Company    @relation(fields: [companyId], references: [id]) 
  createdAt     DateTime   @default(now())
}

model TeamEmployee {
  id         Int     @id @default(autoincrement())
  teamId     Int
  team       Team    @relation(fields: [teamId], references: [id])

  userId     Int
  user       User    @relation(fields: [userId], references: [id])

  department String
  jobTitle   String
  fullName   String
  email      String

  joinedAt   DateTime @default(now())
}

model UserKyc {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  country   String   @default("Nigeria")
  docs      Json     // [{filename, path, mimetype, size}]
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model CardFundingRequest {
  id        Int      @id @default(autoincrement())
  cardId    Int
  card      Card     @relation(fields: [cardId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt DateTime @default(now())
}