// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  SUPERADMIN
  TEAMLEAD
  ADMIN
}


model User {
  id           Int          @id @default(autoincrement())
  firstName    String        
  lastName     String   
  email        String       @unique
  password     String
  isVerified   Boolean      @default(false)        
  mobile       String       @unique
  createdAt    DateTime     @default(now())
  role         Role         @default(EMPLOYEE)
  mfaSecret    String?
  mfaEnabled   Boolean      @default(false)
  otp          Otp?
  companyId    Int?
  company      Company?     @relation(fields: [companyId], references: [id])
}

model Otp {
  id        Int      @id @default(autoincrement())
  code      String
  expiresAt DateTime
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Company {
  id            Int           @id @default(autoincrement())
  name          String
  rcNumber      String         // CAC registration number
  tin           String         // Tax Identification Number
  country       String
  kycStatus     String         @default("pending")
  walletBalance Float          @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  users        User[]
  companyKyc   CompanyKyc?
  walletLedger WalletLedger[]
}

model CompanyKyc {
  id           Int      @id @default(autoincrement())
  companyId    Int      @unique
  docs         Json     // Store uploaded docs as JSON (e.g. file URLs)
  adminBvnHash String
  status       String   @default("pending")
  reviewerId   Int?     // SuperAdmin reviewing KYC
  createdAt    DateTime @default(now())

  company     Company   @relation(fields: [companyId], references: [id])
}

model WalletLedger {
  id           Int      @id @default(autoincrement())
  companyId    Int
  txType       String   // credit, hold, settle, refund, reversal
  amount       Float
  currency     String   @default("NGN")
  balanceAfter Float
  createdAt    DateTime @default(now())

  company     Company   @relation(fields: [companyId], references: [id])
}